library ieee;
use ieee.numeric_std.all;
use std_logic_1164.all;
use work.all;

entity MemRead is 
port(
--custom instruction interface
clk:in std_logic;
reset:in std_logic;
start:in std_logic;
done: out std_logic;
clk_en:in std_logic;
in_addr:in std_logic_vector(31 downto 0);
n_byte:in std_logic_vector(31 downto 0);
data_out:std_logic_vector(31 downto 0)

--avalon mm IO
clk_mm:in std_logic;
reset_mm:in std_logic;
master_address:out std_logic_vector(31 downto 0);
master_read:out std_logic;
master_byteenable:out std_logic_vector(31 downto 0);
master_readdata:out std_logic_vector(31 downto 0);
master_readdatavalid:in std_logic;
master_waitrequest:in std_logic;


full:in std_logic;
load_en:out std_logic;

);

end entity MemRead;

architecture main of MemRead is
signal control_fixed_location:std_logic;
signal user_data_avaliable:std_logic;

begin
control_fixed_location<='0';
entity latency_aware_read_master port map(
clk=>clk_mm,
reset=>reset_mm,
control_go=>start,
control_read_base=>in_addr,
control_read_length=>n_byte,
control_done=>done,
control_fixed_location=>control_fixed_location,
user_data_avaliable=>user_data_avaliable,
user_read_buffer=>user_read_buffer,
user_buffer_data=>data_out,
master_address=>master_address,
master_byteenable=>master_byteenable,
master_read=>master_read,
master_readdata=>master_readdata,
master_readdatavalid=>master_readdatavalid,
master_waitrequest=>master_waitrequest
);
entity controller port map(
reset=>reset_mm,
clk=>clk_mm,
full=>full,
data_avaliable=>user_data_avaliable,
user_read_buffer=>user_read_buffer
);
load_en<=user_data_avaliable;

end architecture main;